
DEFINE CLASS EgoLocation:

    DEFINE FUNCTION init(x, y):

        SET log , ego_road, road_id, lane_id, s_axis, t_axis

    DEFINE FUNCTION get_location():

        RETURN ego_road

    DEFINE FUNCTION get_ego_location_st():

        RETURN s_axis, t_axis



    DEFINE FUNCTION get_t_range(road_id, lane_id):

        SET lanes_list

        FOR lane IN lanes_list:

            IF lane[0] EQUALS lane_id:

                RETURN lane[1], lane[2]

    DEFINE FUNCTION get_ego_road(x, y, log: Log, ego_roads):

        INITIALIZE axis, road_id , lane_id, s_axis , t_axis, point_p, roads

        FOR road IN roads:

            IF is_driving_lane(road):

                SET max_t, min_t

                IF road.planview.geometry_list:

                    SET geometries TO road.planview.geometry_list

                    FOR geometry IN geometries:

                        SET x_origin, y_origin , heading , s_value , geometry_length TO float(geometry.length)

                        IF geometry.arc:

                            SET curvature, axis , curvature_origin_x, curvature_origin_y, min_radius, max_radius, is_point_on_road

                            IF is_point_on_road:

                                SET road_id , s_axis, t_axis , lane_id

                                ADD road_id, lane_id, s_axis, t_axis, road.length TO ego_roads LIST

                        ELSE:

                            SET curvature , axis , max_t, min_t , s, t, rect_side_a, rect_side_b, rect_side_c, rect_side_d , triangle_abc

                            IF triangle_abc:

                                SET road_id, lane_id , s_axis , t_axis

                                ADD road_id, lane_id, s_axis, t_axis, road.length TO ego_roads LIST

                            SET triangle_adc

                            IF triangle_adc:

                                SET road_id , lane_id TO , s_axis , t_axis

                                ADD road_id, lane_id, s_axis, t_axis, road.length TO ego_roads LIST

                ELSEIF road.planview.geometry:

                    SET geometry, x_origin , y_origin , heading , s_value , geometry_length

                    IF geometry.arc:

                        SET curvature , axis , curvature_origin_x, curvature_origin_y, min_radius, max_radius, is_point_on_road

                        IF is_point_on_road:

                            SET road_id, s_axis, t_axis, lane_id

                            ADD road_id, lane_id, s_axis, t_axis, road.length TO ego_roads LIST

                    ELSE:

                        SET curvature , axis , s, t , rect_side_a, rect_side_b, rect_side_c, rect_side_d , triangle_abc

                        IF triangle_abc:

                            SET road_id , lane_id , s_axis , t_axis

                            ADD road_id, lane_id, s_axis, t_axis, road.length TO ego_roads LIST



                        SET triangle_adc

                        IF triangle_adc:

                            SET road_id , lane_id , s_axis, t_axis

                            ADD road_id, lane_id, s_axis, t_axis, road.length TO ego_roads LIST

        RETURN road_id, lane_id, s_axis, t_axis

    DEFINE FUNCTION is_point_lies_in_circle(x, y, curvature_origin_x, curvature_origin_y, min_radius, max_radius):

        SET point

        IF min_radius < point < max_radius:

            RETURN True

        ELSE:

            RETURN False


    DEFINE FUNCTION get_lane_id(road_id, t):

        SET lanes_list

        RETURN check_lane_id(lanes_list, t)


    DEFINE FUNCTION get_lanes_list_with_t_range(road_id):

        SET left_lanes_list , right_lanes_list, roads

        FOR road IN roads:

            IF road.id EQUALS road_id:

                SET lane_offsets

                IF lane_offsets:

                    SET lane_offset

                ELSE:

                    SET lane_offset

                SET left_lane_section

                IF left_lane_section:

                    SET left_lanes_list


                SET right_lane_section

                IF right_lane_section:

                    SET right_lanes_list

                SET lanes_list TO left_lanes_list + right_lanes_list

                RETURN lanes_list

    DEFINE FUNCTION check_lane_id(lanes_list, t):

        FOR lane IN lanes_list:

            IF t > 0:

                IF lane[1] < t <= lane[2]:

                    RETURN lane[0]

            IF t < 0:

                IF lane[1] > t >= lane[2]:

                    RETURN lane[0]

    DEFINE FUNCTION get_lane_list_with_t(lane_section, lane_offset):

        INITIALIZE lanes_list , t

        IF lane_section.LaneList:

            SET lane_list , lane_id , lane_id TO float(lane_id)

            IF lane_id > 0:

                REVERSE lane_list.reverse()

                FOR lane IN lane_list:

                    IF lane.width_list:

                        ADD lane.id, t, t + lane.width_list[0].a TO lanes_list LIST

                        SET t

                    ELSE:

                        ADD lane.id, t, t + lane.width.a TO lanes_list LIST

                        SET t

                REVERSE lane_list

            ELSEIF lane_id < 0:

                FOR lane IN lane_list:

                    IF lane.width_list:

                        ADD lane.id, t, t - lane.width_list[0].a TO lanes_list LIST

                        SET t

                    ELSE:

                        ADD lane.id, t, t - lane.width.a TO lanes_list LIST

                        SET t

        ELSE:

            SET lane_id

            IF lane_id > 0:

                IF lane_section.lane.width_list:

                    ADD lane_section.lane.id, t, t + lane_section.lane.width_list[0].a TO lanes_list LIST

                    SET t

                ELSE:

                    ADD lane_section.lane.id, t, t + lane_section.lane.width.a TO lanes_list LIST

                    SET t

            ELSEIF lane_id < 0:

                IF lane_section.lane.width_list:

                    ADD lane_section.lane.id, t, t - lane_section.lane.width_list[0].a TO lanes_list LIST

                    SET t

                ELSE:

                    ADD lane_section.lane.id, t, t - lane_section.lane.width.a TO lanes_list LIST

                    SET t

        RETURN lanes_list


    DEFINE FUNCTION is_point_lies_in_triangle(point_p, point_a, point_b, point_c):

        SET area_of_tri_abc, area_of_tri_abc , area_of_tri_pab, area_of_tri_pac , area_of_tri_pbc , sum_of_p_triangles , sum_of_p_triangles

        IF area_of_tri_abc != sum_of_p_triangles:

            SET is_point_lies_in TO False

        ELSE:

            SET is_point_lies_in TO True

        RETURN is_point_lies_in

    DEFINE FUNCTION area_of_rectangle(point_a, point_b, point_c):

        SET side_a , side_b , side_c , area_of_triangle

        RETURN area_of_triangle

    DEFINE FUNCTION get_t_values(road):

        SET lane_offset, left_max_t , right_max_t, left_lane_section

        IF left_lane_section:

            IF left_lane_section.LaneList:

                SET lane_list , left_driving_lanes

                IF not left_driving_lanes:

                    SET max_lane , min_lane TO 0

                ELSE:

                    SET max_lane , min_lane

                REVERSE lane_list

                SET left_max_t, left_min_t

                REVERSE lane_list

                IF road.lanes.laneoffset_list:

                    SET lane_offset

                ELSEIF road.lanes.laneoffset:

                    SET lane_offset

                SET left_max_t , left_min_t

            ELSEIF left_lane_section.lane:

                SET left_lane

                IF left_lane.width_list:

                    SET left_max_t

                ELSEIF left_lane.width:

                    SET left_max_t

                SET left_min_t

        SET right_lane_section

        IF right_lane_section:

            IF right_lane_section.LaneList:

                SET lane_list , right_driving_lanes

                IF not right_driving_lanes:

                    SET max_lane , min_lane

                ELSE:

                    SET max_lane, min_lane

                SET right_max_t , right_min_t

                IF road.lanes.laneoffset_list:

                    SET lane_offset

                ELSEIF road.lanes.laneoffset:

                    SET lane_offset

                SET right_max_t

            ELSEIF right_lane_section.lane:

                SET right_lane

                IF right_lane.width_list:

                    SET right_max_t

                ELSEIF right_lane.width:

                    SET right_max_t



        RETURN left_max_t, -right_max_t

    DEFINE FUNCTION is_driving_lane(road):

        INITIALIZE is_driving_lane , right_lane_section, left_lane_section

        IF right_lane_section:

            IF right_lane_section.LaneList:

                FOR lane IN right_lane_section.LaneList:

                    IF lane.type EQUALS "driving":

                        SET is_driving_lane

            ELSE:

                IF right_lane_section.lane.type EQUALS "driving":

                    SET is_driving_lane

        ELSEIF left_lane_section:

            IF left_lane_section.LaneList:

                FOR lane IN left_lane_section.LaneList:

                    IF lane.type EQUALS "driving":

                        SET is_driving_lane

            ELSE:

                IF left_lane_section.lane.type EQUALS "driving":

                    SET is_driving_lane

        RETURN is_driving_lane

    DEFINE FUNCTION get_max_t(max_lane, lanes):

        INITIALIZE max_t, t , lane_width TO 0

        FOR lane IN lanes:

            IF lane.width_list:

                SET lane_width

            ELSEIF lane.width:

                SET lane_width

            SET t

            IF max_lane EQUALS float(lane.id):

                SET max_t

                RETURN max_t

            ELSE:

                SET max_t

        RETURN max_t

    DEFINE FUNCTION get_min_t(min_lane, lanes):

      INITIALIZE min_t, t , lane_width

        FOR lane IN lanes:

            IF lane.width_list:

                SET lane_width

            ELSEIF lane.width:

                SET lane_width

            SET t

            IF min_lane EQUALS float(lane.id):

                SET min_t

                RETURN min_t

            ELSE:

                SET min_t

        RETURN min_t

